generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  email                 String                  @unique
  userName              String                  @unique @map("user_name")
  displayName           String                  @map("display_name")
  password              String?
  icon                  String
  profile               String                  @default("")
  plan                  String                  @default("free")
  totalPoints           Int                     @default(0) @map("total_points")
  isAI                  Boolean                 @default(false) @map("is_ai")
  provider              String                  @default("Credentials")
  geminiApiKey          String?                 @map("gemini_api_key")
  openAIApiKey          String?                 @map("openai_api_key")
  claudeApiKey          String?                 @map("claude_api_key")
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  pages                 Page[]
  userReadHistory       UserReadHistory[]
  apiUsages             ApiUsage[]
  translations          TranslateText[]
  votes                 Vote[]
  userAITranslationInfo UserAITranslationInfo[]
  customAIModels        CustomAIModel[]
  likePages             LikePage[]

  @@map("users")
  @@index([userName])
  @@index([email])
}

model UserAITranslationInfo {
  id                    Int      @id @default(autoincrement())
  userId                Int      @map("user_id")
  pageId                Int      @map("page_id")
  targetLanguage        String   @map("target_language")
  aiModel               String   @map("ai_model")
  aiTranslationStatus   String   @default("pending") @map("ai_translation_status")
  aiTranslationProgress Int      @default(0) @map("ai_translation_progress")
  createdAt             DateTime @default(now()) @map("created_at")
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  page                  Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([pageId])
  @@index([pageId, targetLanguage])
  @@map("user_ai_translation_info")
}

model UserReadHistory {
  id                 Int      @id @default(autoincrement())
  userId             Int      @map("user_id")
  pageId             Int      @map("page_id")
  readAt             DateTime @default(now()) @map("read_at")
  lastReadDataNumber Int      @default(0) @map("last_read_data_number")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  page               Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([userId, pageId])
  @@map("user_read_history")
  @@index([userId])
  @@index([pageId])
}

model PageTranslationInfo {
  id               Int    @id @default(autoincrement())
  pageId           Int    @map("page_id")
  targetLanguage   String @map("target_language")
  translationTitle String @map("translation_title")
  page             Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([pageId, targetLanguage])
  @@map("page_translation_info")
  @@index([pageId])
  @@index([targetLanguage])
}

model Page {
  id                    Int                     @id @default(autoincrement())
  slug                  String                  @unique
  title                 String                  @default("")
  content               String
  sourceLanguage        String                  @default("unknown")
  isPublished           Boolean                 @default(false) @map("is_published")
  isArchived            Boolean                 @default(false) @map("is_archived")
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                Int                     @map("user_id")
  userAITranslationInfo UserAITranslationInfo[]
  sourceTexts           SourceText[]
  pageTranslationInfo   PageTranslationInfo[]
  userReadHistory       UserReadHistory[]
  genrePages            GenrePage[]
  tagPages              TagPage[]
  likePages             LikePage[]

  @@map("pages")
  @@index([createdAt])
  @@index([userId])
  @@index([slug])
}

model LikePage {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  pageId    Int      @map("page_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([userId, pageId])
  @@map("like_pages")
  @@index([userId])
  @@index([pageId])
}

model Genre {
  id    Int         @id @default(autoincrement())
  name  String      @unique
  pages GenrePage[]

  @@map("genres")
  @@index([name])
}

model GenrePage {
  genreId Int
  pageId  Int
  genre   Genre @relation(fields: [genreId], references: [id])
  page    Page  @relation(fields: [pageId], references: [id])

  @@id([genreId, pageId])
  @@map("genre_pages")
  @@index([genreId])
  @@index([pageId])
}

model Tag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  pages TagPage[]

  @@map("tags")
  @@index([name])
}

model TagPage {
  tagId  Int
  pageId Int
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  page   Page @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@id([tagId, pageId])
  @@map("tag_pages")
  @@index([tagId])
  @@index([pageId])
}

model SourceText {
  id             Int             @id @default(autoincrement())
  text           String
  number         Int
  textAndOccurrenceHash String @map("text_and_occurrence_hash")
  translateTexts TranslateText[]
  page           Page            @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId         Int             @map("page_id")
  createdAt      DateTime        @default(now()) @map("created_at")

  @@unique([pageId, number])
  @@unique([pageId, textAndOccurrenceHash])
  @@map("source_texts")
  @@index([pageId])
  @@index([number])
  @@index([textAndOccurrenceHash])
}

model TranslateText {
  id             Int        @id @default(autoincrement())
  targetLanguage String
  text           String
  sourceTextId   Int        @map("source_text_id")
  userId         Int        @map("user_id")
  point          Int        @default(0)
  isArchived     Boolean    @default(false) @map("is_archived")
  createdAt      DateTime   @default(now()) @map("created_at")
  sourceText     SourceText @relation(fields: [sourceTextId], references: [id], onDelete: Cascade)
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes          Vote[]

  @@map("translate_texts")
  @@index([sourceTextId])
  @@index([userId])
  @@index([targetLanguage])
}

model Vote {
  id              Int           @id @default(autoincrement())
  userId          Int           @map("user_id")
  translateTextId Int           @map("translate_text_id")
  isUpvote        Boolean       @map("is_upvote")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  translateText   TranslateText @relation(fields: [translateTextId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([translateTextId, userId])
  @@map("votes")
  @@index([translateTextId])
  @@index([userId])
}

model ApiUsage {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  dateTime   DateTime @map("date_time")
  amountUsed Int      @map("amount_used")
  user       User     @relation(fields: [userId], references: [id])

  @@map("api_usage")
  @@index([userId])
  @@index([dateTime])
}

model CustomAIModel {
  id        String   @id @default(cuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  name      String
  apiKey    String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId])
  @@index([name])
}
